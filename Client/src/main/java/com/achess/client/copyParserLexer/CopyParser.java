
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.achess.client.copyParserLexer;

import java.util.List;
import java_cup.runtime.Symbol;
import com.achess.client.error.ClientError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CopyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CopyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CopyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CopyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\005\000\002\005\004\000\002\010\005\000" +
    "\002\006\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\003\000\002\024\003\000\002\024\003\000\002\011" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\012\003\000" +
    "\002\015\010\000\002\020\003\000\002\014\010\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\013" +
    "\010\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\016\010\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\003\000\002\031\005\000\002\031\004\000" +
    "\002\075\004\000\002\076\004\000\002\077\004\000\002" +
    "\100\004\000\002\101\004\000\002\102\004\000\002\103" +
    "\004\000\002\104\004\000\002\105\004\000\002\106\004" +
    "\000\002\107\004\000\002\110\004\000\002\111\004\000" +
    "\002\112\004\000\002\113\012\000\002\114\004\000\002" +
    "\115\004\000\002\072\005\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\064\007\000\002\023\003\000\002\023\003\000" +
    "\002\073\003\000\002\073\004\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\032\005" +
    "\000\002\033\003\000\002\034\005\000\002\035\003\000" +
    "\002\063\003\000\002\047\005\000\002\050\003\000\002" +
    "\051\003\000\002\051\004\000\002\052\003\000\002\052" +
    "\003\000\002\036\005\000\002\037\003\000\002\065\003" +
    "\000\002\065\004\000\002\066\003\000\002\066\003\000" +
    "\002\053\005\000\002\054\003\000\002\055\003\000\002" +
    "\055\004\000\002\056\003\000\002\040\005\000\002\041" +
    "\003\000\002\067\003\000\002\067\004\000\002\070\003" +
    "\000\002\070\003\000\002\070\003\000\002\057\005\000" +
    "\002\060\003\000\002\061\003\000\002\061\004\000\002" +
    "\062\003\000\002\062\003\000\002\042\005\000\002\043" +
    "\003\000\002\044\005\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\012\004\uffff\027\010\030\005\033\012\001" +
    "\002\000\004\054\320\001\002\000\004\033\uffdf\001\002" +
    "\000\004\002\317\001\002\000\004\004\126\001\002\000" +
    "\004\033\uffe0\001\002\000\004\033\120\001\002\000\004" +
    "\060\016\001\002\000\012\004\ufffe\027\010\030\005\033" +
    "\012\001\002\000\012\004\ufffd\027\ufffd\030\ufffd\033\ufffd" +
    "\001\002\000\012\004\ufffc\027\ufffc\030\ufffc\033\ufffc\001" +
    "\002\000\016\031\031\032\022\033\025\035\030\050\027" +
    "\062\017\001\002\000\016\031\031\032\022\033\025\035" +
    "\030\050\027\062\017\001\002\000\020\051\uffd8\054\uffd8" +
    "\056\uffd8\061\uffd8\062\uffd8\063\110\064\111\001\002\000" +
    "\012\054\ufff9\056\ufff9\061\105\062\106\001\002\000\020" +
    "\051\uffdd\054\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\001\002\000\020\051\uffd5\054\uffd5\056\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\001\002\000\020\051\uffdc\054" +
    "\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\001\002" +
    "\000\020\051\uffde\054\uffde\056\uffde\061\uffde\062\uffde\063" +
    "\uffde\064\uffde\001\002\000\020\051\uffd4\054\uffd4\056\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\001\002\000\016\031" +
    "\031\032\022\033\025\035\030\050\027\062\017\001\002" +
    "\000\004\057\032\001\002\000\020\051\uffdb\054\uffdb\056" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\001\002\000\014" +
    "\036\045\037\036\040\041\041\037\042\042\001\002\000" +
    "\020\051\uffed\054\uffed\056\uffed\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\001\002\000\020\051\uffef\054\uffef\056\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\001\002\000\020\051\ufff0" +
    "\054\ufff0\056\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\001" +
    "\002\000\004\052\076\001\002\000\004\052\066\001\002" +
    "\000\020\051\ufff1\054\ufff1\056\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\001\002\000\004\052\055\001\002\000\004" +
    "\052\046\001\002\000\020\051\ufff2\054\ufff2\056\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\001\002\000\020\051\uffee" +
    "\054\uffee\056\uffee\061\uffee\062\uffee\063\uffee\064\uffee\001" +
    "\002\000\020\051\uffec\054\uffec\056\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\001\002\000\006\031\047\033\050\001" +
    "\002\000\010\026\ufff3\053\ufff3\066\ufff3\001\002\000\010" +
    "\026\ufff4\053\ufff4\066\ufff4\001\002\000\004\053\052\001" +
    "\002\000\004\057\053\001\002\000\004\047\054\001\002" +
    "\000\020\051\uffe1\054\uffe1\056\uffe1\061\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\001\002\000\006\031\047\033\050\001\002" +
    "\000\004\053\057\001\002\000\004\057\060\001\002\000" +
    "\010\043\065\045\063\046\062\001\002\000\020\051\uffe8" +
    "\054\uffe8\056\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\001" +
    "\002\000\020\051\uffe6\054\uffe6\056\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\020\051\uffea\054\uffea\056" +
    "\uffea\061\uffea\062\uffea\063\uffea\064\uffea\001\002\000\020" +
    "\051\uffe9\054\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\001\002\000\020\051\uffe7\054\uffe7\056\uffe7\061\uffe7" +
    "\062\uffe7\063\uffe7\064\uffe7\001\002\000\006\031\047\033" +
    "\050\001\002\000\004\053\070\001\002\000\004\057\071" +
    "\001\002\000\010\043\075\044\074\045\063\001\002\000" +
    "\020\051\uffe5\054\uffe5\056\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\001\002\000\020\051\uffe4\054\uffe4\056\uffe4\061" +
    "\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000\020\051\uffe2" +
    "\054\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001" +
    "\002\000\020\051\uffe3\054\uffe3\056\uffe3\061\uffe3\062\uffe3" +
    "\063\uffe3\064\uffe3\001\002\000\006\031\047\033\050\001" +
    "\002\000\004\053\100\001\002\000\004\057\101\001\002" +
    "\000\004\045\063\001\002\000\020\051\uffeb\054\uffeb\056" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\001\002\000\010" +
    "\051\104\061\105\062\106\001\002\000\020\051\uffd3\054" +
    "\uffd3\056\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\001\002" +
    "\000\016\031\031\032\022\033\025\035\030\050\027\062" +
    "\017\001\002\000\016\031\031\032\022\033\025\035\030" +
    "\050\027\062\017\001\002\000\020\051\uffd9\054\uffd9\056" +
    "\uffd9\061\uffd9\062\uffd9\063\110\064\111\001\002\000\016" +
    "\031\031\032\022\033\025\035\030\050\027\062\017\001" +
    "\002\000\016\031\031\032\022\033\025\035\030\050\027" +
    "\062\017\001\002\000\020\051\uffd6\054\uffd6\056\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\001\002\000\020\051\uffd7" +
    "\054\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\001" +
    "\002\000\020\051\uffda\054\uffda\056\uffda\061\uffda\062\uffda" +
    "\063\110\064\111\001\002\000\020\051\uffd2\054\uffd2\056" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\001\002\000\006" +
    "\054\ufff5\056\ufff5\001\002\000\006\054\ufff8\056\ufff8\001" +
    "\002\000\010\054\ufff6\056\ufff6\060\016\001\002\000\006" +
    "\054\123\056\122\001\002\000\004\033\120\001\002\000" +
    "\012\004\ufffb\027\ufffb\030\ufffb\033\ufffb\001\002\000\006" +
    "\054\ufff7\056\ufff7\001\002\000\026\005\132\006\137\007" +
    "\155\010\161\024\152\031\156\032\145\033\141\034\160" +
    "\065\142\001\002\000\004\066\130\001\002\000\004\002" +
    "\000\001\002\000\026\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\024\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\065\uffd1\001" +
    "\002\000\030\005\uffb5\006\uffb5\007\uffb5\010\uffb5\014\uffb5" +
    "\024\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\065\uffb5\001" +
    "\002\000\004\066\316\001\002\000\032\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\014\uffb0\017\uffb0\024\uffb0\031\uffb0\032" +
    "\uffb0\033\uffb0\034\uffb0\065\uffb0\001\002\000\032\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\014\uffb2\017\uffb2\024\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\065\uffb2\001\002\000\032" +
    "\005\uffaa\006\uffaa\007\uffaa\010\uffaa\014\uffaa\017\uffaa\024" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\065\uffaa\001\002" +
    "\000\014\031\156\032\145\033\141\034\160\065\142\001" +
    "\002\000\004\066\310\001\002\000\030\005\132\006\137" +
    "\007\155\010\161\014\305\024\152\031\156\032\145\033" +
    "\141\034\160\065\142\001\002\000\042\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\065\uffbf\001\002\000\004\050\276\001\002\000\032\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\014\uffaf\017\uffaf\024\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\065\uffaf\001\002\000" +
    "\006\007\155\011\213\001\002\000\042\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\065\uffbe\001\002\000\030\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\014\uffb4\024\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\065\uffb4\001\002\000\014\031\156\032\145\033\141\034" +
    "\160\065\142\001\002\000\024\005\132\006\137\010\161" +
    "\024\152\031\156\032\145\033\141\034\160\065\142\001" +
    "\002\000\042\005\uffbb\006\uffbb\007\uffbb\010\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\022\uffbb\023\uffbb\024\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\065\uffbb\001\002\000\004" +
    "\066\172\001\002\000\030\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\014\uffb7\024\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\065\uffb7\001\002\000\032\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\014\uffb1\017\uffb1\024\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\065\uffb1\001\002\000\004\025\163\001\002\000" +
    "\042\005\uffbd\006\uffbd\007\uffbd\010\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\022\uffbd\023\uffbd\024\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\065\uffbd\001\002\000\030\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\014\uffb3\024\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\065\uffb3\001\002\000\042\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\065\uffbc\001\002\000\004\066\162\001\002\000" +
    "\006\007\uffcb\011\uffcb\001\002\000\004\055\164\001\002" +
    "\000\006\031\047\033\050\001\002\000\004\026\166\001" +
    "\002\000\004\055\167\001\002\000\006\031\047\033\050" +
    "\001\002\000\004\066\171\001\002\000\032\005\uffc3\006" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\024\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\065\uffc3\001\002\000\032\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\014\uffc1\017\uffc1\024\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\034\uffc1\065\uffc1\001\002\000" +
    "\026\005\uffa5\006\uffa5\010\uffa5\017\uffa5\024\uffa5\031\uffa5" +
    "\032\uffa5\033\uffa5\034\uffa5\065\uffa5\001\002\000\026\005" +
    "\uffa7\006\uffa7\010\uffa7\017\uffa7\024\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\065\uffa7\001\002\000\004\017\201\001" +
    "\002\000\026\005\132\006\137\010\161\017\uffa8\024\152" +
    "\031\156\032\145\033\141\034\160\065\142\001\002\000" +
    "\026\005\uffa4\006\uffa4\010\uffa4\017\uffa4\024\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\065\uffa4\001\002\000\026\005" +
    "\uffa6\006\uffa6\010\uffa6\017\uffa6\024\uffa6\031\uffa6\032\uffa6" +
    "\033\uffa6\034\uffa6\065\uffa6\001\002\000\004\066\203\001" +
    "\002\000\030\005\uffa9\006\uffa9\007\uffa9\010\uffa9\014\uffa9" +
    "\024\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\065\uffa9\001" +
    "\002\000\042\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\020\uffc2\021\uffc2\024\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\065\uffc2\001\002\000\004" +
    "\016\207\001\002\000\004\016\uffab\001\002\000\032\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\014\uffac\017\uffac\024\uffac" +
    "\031\uffac\032\uffac\033\uffac\034\uffac\065\uffac\001\002\000" +
    "\004\066\210\001\002\000\032\005\uffcc\006\uffcc\007\uffcc" +
    "\010\uffcc\014\uffcc\017\uffcc\024\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\065\uffcc\001\002\000\010\007\uff9e\011\uff9e" +
    "\020\uff9e\001\002\000\010\007\155\012\242\013\241\001" +
    "\002\000\004\066\233\001\002\000\004\011\213\001\002" +
    "\000\010\007\uff9f\011\uff9f\020\uff9f\001\002\000\010\007" +
    "\155\011\213\020\uffa2\001\002\000\004\020\222\001\002" +
    "\000\010\007\uffa1\011\uffa1\020\uffa1\001\002\000\032\005" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\014\uffa3\017\uffa3\024\uffa3" +
    "\031\uffa3\032\uffa3\033\uffa3\034\uffa3\065\uffa3\001\002\000" +
    "\004\066\223\001\002\000\032\005\uffca\006\uffca\007\uffca" +
    "\010\uffca\014\uffca\017\uffca\024\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\065\uffca\001\002\000\010\007\uffa0\011\uffa0" +
    "\020\uffa0\001\002\000\006\011\213\017\uff9c\001\002\000" +
    "\006\011\uff9b\017\uff9b\001\002\000\004\017\201\001\002" +
    "\000\006\011\uff99\017\uff99\001\002\000\010\007\uff9d\011" +
    "\uff9d\020\uff9d\001\002\000\006\011\uff9a\017\uff9a\001\002" +
    "\000\010\007\uffc9\012\uffc9\013\uffc9\001\002\000\012\007" +
    "\uff93\012\uff93\013\uff93\021\uff93\001\002\000\014\031\156" +
    "\032\145\033\141\034\160\065\142\001\002\000\004\021" +
    "\267\001\002\000\012\007\uff96\012\uff96\013\uff96\021\uff96" +
    "\001\002\000\014\031\156\032\145\033\141\034\160\065" +
    "\142\001\002\000\004\066\260\001\002\000\004\066\257" +
    "\001\002\000\012\007\uff94\012\uff94\013\uff94\021\uff94\001" +
    "\002\000\012\007\155\012\242\013\241\021\uff97\001\002" +
    "\000\006\012\242\013\241\001\002\000\012\007\uff92\012" +
    "\uff92\013\uff92\021\uff92\001\002\000\010\012\uff8d\013\uff8d" +
    "\017\uff8d\001\002\000\004\017\201\001\002\000\010\012" +
    "\uff8c\013\uff8c\017\uff8c\001\002\000\010\012\242\013\241" +
    "\017\uff90\001\002\000\010\012\uff8f\013\uff8f\017\uff8f\001" +
    "\002\000\010\012\uff8e\013\uff8e\017\uff8e\001\002\000\012" +
    "\007\uff91\012\uff91\013\uff91\021\uff91\001\002\000\012\007" +
    "\uff95\012\uff95\013\uff95\021\uff95\001\002\000\014\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\065\uffc7\001\002\000\014\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\065\uffc5\001\002\000\004" +
    "\023\uff88\001\002\000\004\023\264\001\002\000\014\007" +
    "\uff89\012\uff89\013\uff89\017\uff89\021\uff89\001\002\000\004" +
    "\066\265\001\002\000\014\007\uffc4\012\uffc4\013\uffc4\017" +
    "\uffc4\021\uffc4\001\002\000\012\007\uff98\011\uff98\017\uff98" +
    "\020\uff98\001\002\000\004\066\270\001\002\000\012\007" +
    "\uffc8\011\uffc8\017\uffc8\020\uffc8\001\002\000\004\022\uff8a" +
    "\001\002\000\004\022\273\001\002\000\004\066\275\001" +
    "\002\000\014\007\uff8b\012\uff8b\013\uff8b\017\uff8b\021\uff8b" +
    "\001\002\000\014\007\uffc6\012\uffc6\013\uffc6\017\uffc6\021" +
    "\uffc6\001\002\000\006\033\301\035\030\001\002\000\004" +
    "\051\uffb8\001\002\000\004\051\302\001\002\000\004\051" +
    "\uffb9\001\002\000\004\065\303\001\002\000\042\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\022\uffba\023\uffba\024\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\065\uffba\001\002\000\004\002\uffc0\001\002\000" +
    "\004\066\307\001\002\000\030\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\014\uffb6\024\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\065\uffb6\001\002\000\004\002\uffd0\001\002\000\014" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\065\uffcd\001\002\000" +
    "\004\015\uffad\001\002\000\004\015\314\001\002\000\032" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\014\uffae\017\uffae\024" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\065\uffae\001\002" +
    "\000\004\066\315\001\002\000\032\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\014\uffce\017\uffce\024\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\065\uffce\001\002\000\014\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\065\uffcf\001\002\000\004\002\001" +
    "\001\002\000\012\004\ufffa\027\ufffa\030\ufffa\033\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\016\002\005\003\006\004\012\005\013\010" +
    "\003\025\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\072\126\075\124\001\001\000" +
    "\002\001\001\000\010\006\120\007\116\010\115\001\001" +
    "\000\002\001\001\000\010\005\014\010\003\025\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\023" +
    "\026\025\027\020\030\017\031\022\001\001\000\010\011" +
    "\023\026\025\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\011\023" +
    "\026\025\027\102\030\017\031\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\037\013\043\014\033" +
    "\015\034\016\032\017\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\060\021\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\072\022" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\023\026\025\030\113\031\022\001\001\000\012" +
    "\011\023\026\025\030\106\031\022\001\001\000\002\001" +
    "\001\000\010\011\023\026\025\031\112\001\001\000\010" +
    "\011\023\026\025\031\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\123\010\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\032\133\034\153\036\132\046" +
    "\130\047\145\063\142\064\150\071\156\073\137\074\152" +
    "\077\135\101\146\103\143\113\147\115\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\311\064\150\071\310" +
    "\001\001\000\002\001\001\000\040\032\133\034\153\036" +
    "\132\046\130\047\145\063\142\064\150\071\156\074\305" +
    "\076\303\077\135\101\146\103\143\113\147\115\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\037\216\040\214\053\210\065\215\066\217\105" +
    "\211\113\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\035\203\064\150\071\204\001\001\000\036\032" +
    "\133\034\153\036\132\046\172\050\174\051\175\052\173" +
    "\063\142\064\150\071\176\077\135\101\146\103\143\115" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\201" +
    "\001\001\000\032\032\133\034\153\036\132\046\172\052" +
    "\177\063\142\064\150\071\176\077\135\101\146\103\143" +
    "\115\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\235\042\242\044\233\057\245\067\243\070\236\107" +
    "\234\111\237\113\244\001\001\000\002\001\001\000\014" +
    "\040\227\054\226\055\224\056\225\105\211\001\001\000" +
    "\002\001\001\000\014\040\214\053\210\066\223\105\211" +
    "\113\213\001\001\000\004\104\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\040\227\056\231\105\211\001" +
    "\001\000\002\001\001\000\004\114\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\271\064\150\071\270" +
    "\001\001\000\004\106\265\001\001\000\002\001\001\000" +
    "\010\045\261\064\150\071\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\042\242\044" +
    "\233\057\245\070\255\107\234\111\237\113\244\001\001" +
    "\000\020\042\250\044\246\060\247\061\251\062\252\107" +
    "\234\111\237\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\254\001\001\000\002\001\001\000\014\042" +
    "\250\044\246\062\253\107\234\111\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\112\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\110\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\276\023\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CopyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CopyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CopyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 	
  
    public CopyParser(CopyLexer lexer){
        super(lexer);		
    }

    public void syntax_error(Symbol cur_token) {        
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = symbl_name_from_id(cur_token.sym);
        String des = "Se esperaba:    \n";
        boolean count = false;
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);                        
			des += fromId +" o ";                        
            count = true;
		}
        des = des.substring(0, des.length() - 3);

        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Error sintáctico ln:"+line+" col:"+column+ " " +lexeme + "\n");
		if(count) ClientError.getError().log(des+"\n");
	}

    public void report_fatal_error(String message, Object info) {
        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Message: " + message);
		ClientError.getError().log("Info: " + info.toString());		
	}
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CopyParser$actions {
  private final CopyParser parser;

  /** Constructor */
  CUP$CopyParser$actions(CopyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CopyParser$do_action_part00000000(
    int                        CUP$CopyParser$act_num,
    java_cup.runtime.lr_parser CUP$CopyParser$parser,
    java.util.Stack            CUP$CopyParser$stack,
    int                        CUP$CopyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CopyParser$result;

      /* select the action based on the action number */
      switch (CUP$CopyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initialState EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		RESULT = start_val;
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CopyParser$parser.done_parsing();
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initialState ::= field_definitions_opt html_declarator 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("initialState",0, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // field_definitions_opt ::= 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions_opt",1, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_definitions_opt ::= field_definitions 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions_opt",1, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_definitions ::= field_definition 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions",2, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_definitions ::= field_definitions field_definition 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions",2, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_definition ::= type variable_declarators SEMICOLON 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definition",3, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_definition ::= variable_assignment SEMICOLON 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definition",3, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // variable_assignment ::= IDENTIFIER EQ operation 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_assignment",6, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable_declarators ::= variable_declarator 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",4, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_declarators ::= variable_declarators COMMA variable_declarator 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",4, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_declarator ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",5, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_declarator ::= variable_assignment 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",5, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // integer_value ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("integer_value",18, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // integer_value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("integer_value",18, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // access_result ::= RESULT DOT result_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_result",7, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // result_variables ::= access_score 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // result_variables ::= access_classes 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // result_variables ::= access_methods 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // result_variables ::= access_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // result_variables ::= access_comments 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // access_score ::= SCORE 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_score",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // access_classes ::= CLASES LBRACKET integer_value RBRACKET DOT class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_classes",11, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // class_variables ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("class_variables",14, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // access_methods ::= METODOS LBRACKET integer_value RBRACKET DOT method_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_methods",10, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // method_variables ::= class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // method_variables ::= TIPO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_variables ::= PARAMETROS 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // access_variables ::= VARIABLES LBRACKET integer_value RBRACKET DOT var_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_variables",9, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var_variables ::= class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",16, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var_variables ::= TIPO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",16, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // var_variables ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",16, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // access_comments ::= COMENTARIOS LBRACKET integer_value RBRACKET DOT TEXTO_COMENTARIO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_comments",12, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // values ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // values ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // values ::= access_result 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // values ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operation ::= operation PLUS term 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",21, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operation ::= operation MINUS term 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",21, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operation ::= term 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",21, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // term ::= term MULT factor 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term DIV factor 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= factor 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= values 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= LPAREN operation RPAREN 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= MINUS factor 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // html_tag_open ::= HTML_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_tag_open",59, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // html_tag_close ::= HTML_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_tag_close",60, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // h1_tag_open ::= H1_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag_open",61, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // h1_tag_close ::= H1_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag_close",62, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // h2_tag_open ::= H2_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag_open",63, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // h2_tag_close ::= H2_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag_close",64, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // table_tag_open ::= TABLE_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag_open",65, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // table_tag_close ::= TABLE_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag_close",66, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tr_tag_open ::= TR_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag_open",67, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tr_tag_close ::= TR_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag_close",68, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // th_tag_open ::= TH_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag_open",69, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // th_tag_close ::= TH_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag_close",70, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // td_tag_open ::= TD_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag_open",71, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // td_tag_close ::= TD_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag_close",72, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for_tag_open ::= FOR_OPEN ITERADOR COLON integer_value HASTA COLON integer_value GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag_open",73, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-7)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_tag_close ::= FOR_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag_close",74, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // br_tag_open ::= BR_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("br_tag_open",75, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // html_declarator ::= html_tag_open html_body html_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_declarator",56, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // values_html ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // values_html ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // values_html ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // values_html ::= TEXT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // values_html ::= call_variable 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // call_variable ::= DPESOS LPAREN id_call RPAREN DPESOS 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("call_variable",50, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-4)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // id_call ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("id_call",17, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // id_call ::= access_result 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("id_call",17, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // html_body ::= html_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_body",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // html_body ::= html_body html_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_body",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // html_element ::= html_element_no_for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",58, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // html_element ::= for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",58, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // html_element ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",58, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // html_element_no_for_tag ::= h1_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",36, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // html_element_no_for_tag ::= h2_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",36, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // html_element_no_for_tag ::= table_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",36, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // html_element_no_for_tag ::= br_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",36, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // h1_tag ::= h1_tag_open h1_body h1_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag",24, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // h1_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_body",25, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // h2_tag ::= h2_tag_open h2_body h2_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag",26, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // h2_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_body",27, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // br_tag ::= br_tag_open 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("br_tag",49, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_tag ::= for_tag_open for_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag",37, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_body ::= for_body_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body",38, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_body_elements ::= for_body_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_elements",39, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_body_elements ::= for_body_elements for_body_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_elements",39, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for_body_element ::= html_element_no_for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_element",40, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for_body_element ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_element",40, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // table_tag ::= table_tag_open table_body table_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag",28, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // table_body ::= table_elemets 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_body",29, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // table_elemets ::= table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_elemets",51, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // table_elemets ::= table_elemets table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_elemets",51, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // table_element ::= tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_element",52, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // table_element ::= for_table_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_element",52, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_table_tag ::= for_tag_open for_table_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_tag",41, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_table_body ::= for_table_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_body",42, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_table_elements ::= for_table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_elements",43, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_table_elements ::= for_table_elements for_table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_elements",43, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_table_element ::= tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_element",44, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tr_tag ::= tr_tag_open tr_body tr_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag",30, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tr_body ::= tr_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_body",31, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tr_elements ::= tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_elements",53, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tr_elements ::= tr_elements tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_elements",53, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tr_element ::= th_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",54, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tr_element ::= td_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",54, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tr_element ::= for_tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",54, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_tr_tag ::= for_tag_open for_tr_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_tag",45, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_tr_body ::= for_tr_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_body",46, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_tr_elements ::= for_tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_elements",47, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_tr_elements ::= for_tr_elements for_tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_elements",47, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_tr_element ::= td_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_element",48, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // for_tr_element ::= th_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_element",48, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // th_tag ::= th_tag_open th_body th_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag",32, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // th_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_body",33, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // td_tag ::= td_tag_open td_body td_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag",34, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // td_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_body",35, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CopyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CopyParser$do_action(
    int                        CUP$CopyParser$act_num,
    java_cup.runtime.lr_parser CUP$CopyParser$parser,
    java.util.Stack            CUP$CopyParser$stack,
    int                        CUP$CopyParser$top)
    throws java.lang.Exception
    {
              return CUP$CopyParser$do_action_part00000000(
                               CUP$CopyParser$act_num,
                               CUP$CopyParser$parser,
                               CUP$CopyParser$stack,
                               CUP$CopyParser$top);
    }
}

}
