
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.achess.client.copyParserLexer;

import java.util.List;
import java_cup.runtime.Symbol;
import com.achess.client.error.ClientError;
import com.achess.client.copy.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CopyParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CopyParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CopyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CopyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\005\005\000\002\005\004\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\010\005\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\026\003\000\002\026\003\000\002\013\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\014\003\000\002\017\010\000" +
    "\002\022\003\000\002\016\010\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\015\010\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\020\010" +
    "\000\002\027\003\000\002\027\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\003\000\002\032\005\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\033\004\000\002\077\004\000" +
    "\002\100\004\000\002\101\004\000\002\102\004\000\002" +
    "\103\004\000\002\104\004\000\002\105\004\000\002\106" +
    "\004\000\002\107\004\000\002\110\004\000\002\111\004" +
    "\000\002\112\004\000\002\113\004\000\002\114\004\000" +
    "\002\115\012\000\002\116\004\000\002\117\004\000\002" +
    "\074\005\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\066\007" +
    "\000\002\025\003\000\002\025\003\000\002\075\003\000" +
    "\002\075\004\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\034\005\000\002\035\003" +
    "\000\002\036\005\000\002\037\003\000\002\065\003\000" +
    "\002\051\005\000\002\052\003\000\002\053\003\000\002" +
    "\053\004\000\002\054\003\000\002\054\003\000\002\040" +
    "\005\000\002\041\003\000\002\067\003\000\002\067\004" +
    "\000\002\070\003\000\002\070\003\000\002\055\005\000" +
    "\002\056\003\000\002\057\003\000\002\057\004\000\002" +
    "\060\003\000\002\042\005\000\002\043\003\000\002\071" +
    "\003\000\002\071\004\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\061\005\000\002\062\003\000" +
    "\002\063\003\000\002\063\004\000\002\064\003\000\002" +
    "\064\003\000\002\044\005\000\002\045\003\000\002\046" +
    "\005\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\036\004\uffff\027\015\030\025\033\010\036" +
    "\011\037\023\040\006\041\016\042\017\043\013\044\026" +
    "\045\020\046\021\047\005\001\002\000\036\004\ufffe\027" +
    "\015\030\025\033\010\036\011\037\023\040\006\041\016" +
    "\042\017\043\013\044\026\045\020\046\021\047\005\001" +
    "\002\000\114\005\uffee\006\uffee\007\uffee\010\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\022\uffee\023\uffee\024\uffee\026" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\051\uffee\053\uffee\054\uffee\056\uffee\060\uffee" +
    "\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee\001" +
    "\002\000\114\005\ufff5\006\ufff5\007\ufff5\010\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\022\ufff5\023\ufff5\024\ufff5\026" +
    "\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5\056\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\001" +
    "\002\000\030\033\010\036\011\037\023\040\006\041\016" +
    "\042\017\043\013\044\026\045\020\046\021\047\005\001" +
    "\002\000\114\005\ufff9\006\ufff9\007\ufff9\010\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\022\ufff9\023\ufff9\024\ufff9\026" +
    "\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\047\ufff9\051\ufff9\053\ufff9\054\ufff9\056\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\001" +
    "\002\000\114\005\ufff7\006\ufff7\007\ufff7\010\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\022\ufff7\023\ufff7\024\ufff7\026" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\051\ufff7\053\ufff7\054\ufff7\056\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\001" +
    "\002\000\114\005\ufff8\006\ufff8\007\ufff8\010\ufff8\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\022\ufff8\023\ufff8\024\ufff8\026" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\051\ufff8\053\ufff8\054\ufff8\056\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\001" +
    "\002\000\114\005\ufff2\006\ufff2\007\ufff2\010\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\022\ufff2\023\ufff2\024\ufff2\026" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\051\ufff2\053\ufff2\054\ufff2\056\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\001" +
    "\002\000\036\004\ufffd\027\ufffd\030\ufffd\033\ufffd\036\ufffd" +
    "\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\047\ufffd\001\002\000\030\033\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\047\uffd4\001\002\000\114\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\026\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4" +
    "\054\ufff4\056\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\001\002\000\114\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\022" +
    "\ufff3\023\ufff3\024\ufff3\026\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\051\ufff3\053\ufff3" +
    "\054\ufff3\056\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\001\002\000\114\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\026\ufff0\031\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\051\ufff0\053\ufff0" +
    "\054\ufff0\056\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\001\002\000\114\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\014\uffef\015\uffef\016\uffef\017\uffef\022" +
    "\uffef\023\uffef\024\uffef\026\uffef\031\uffef\032\uffef\033\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\047\uffef\051\uffef\053\uffef" +
    "\054\uffef\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064" +
    "\uffef\065\uffef\066\uffef\001\002\000\004\054\324\001\002" +
    "\000\114\005\ufff6\006\ufff6\007\ufff6\010\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\047\ufff6\051\ufff6\053\ufff6\054\ufff6\056\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\001\002" +
    "\000\004\002\323\001\002\000\030\033\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\001\002\000\114\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\026\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\045\ufff1\046\ufff1\047\ufff1\051\ufff1\053\ufff1\054" +
    "\ufff1\056\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\001\002\000\004\004\132\001\002\000" +
    "\004\060\031\001\002\000\042\031\042\032\034\033\010" +
    "\035\043\036\011\037\023\040\006\041\016\042\017\043" +
    "\013\044\026\045\020\046\021\047\005\050\033\062\040" +
    "\001\002\000\020\051\uffc9\054\uffc9\056\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\001\002\000\042\031\042\032\034" +
    "\033\010\035\043\036\011\037\023\040\006\041\016\042" +
    "\017\043\013\044\026\045\020\046\021\047\005\050\033" +
    "\062\040\001\002\000\020\051\uffd2\054\uffd2\056\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\001\002\000\012\054\uffed" +
    "\056\uffed\061\123\062\124\001\002\000\020\051\uffca\054" +
    "\uffca\056\uffca\061\uffca\062\uffca\063\uffca\064\uffca\001\002" +
    "\000\020\051\uffcd\054\uffcd\056\uffcd\061\uffcd\062\uffcd\063" +
    "\117\064\120\001\002\000\042\031\042\032\034\033\010" +
    "\035\043\036\011\037\023\040\006\041\016\042\017\043" +
    "\013\044\026\045\020\046\021\047\005\050\033\062\040" +
    "\001\002\000\020\051\uffd1\054\uffd1\056\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\001\002\000\020\051\uffd0\054\uffd0" +
    "\056\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\001\002\000" +
    "\004\057\045\001\002\000\020\051\uffc8\054\uffc8\056\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\001\002\000\014\036" +
    "\060\037\051\040\054\041\052\042\055\001\002\000\020" +
    "\051\uffe1\054\uffe1\056\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\001\002\000\020\051\uffe3\054\uffe3\056\uffe3\061\uffe3" +
    "\062\uffe3\063\uffe3\064\uffe3\001\002\000\020\051\uffe4\054" +
    "\uffe4\056\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002" +
    "\000\004\052\111\001\002\000\004\052\101\001\002\000" +
    "\020\051\uffe5\054\uffe5\056\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\001\002\000\004\052\070\001\002\000\004\052" +
    "\061\001\002\000\020\051\uffe6\054\uffe6\056\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\001\002\000\020\051\uffe2\054" +
    "\uffe2\056\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002" +
    "\000\020\051\uffe0\054\uffe0\056\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\001\002\000\032\031\064\033\010\036\011" +
    "\037\023\040\006\041\016\042\017\043\013\044\026\045" +
    "\020\046\021\047\005\001\002\000\010\026\uffe8\053\uffe8" +
    "\066\uffe8\001\002\000\004\053\065\001\002\000\010\026" +
    "\uffe7\053\uffe7\066\uffe7\001\002\000\004\057\066\001\002" +
    "\000\004\047\067\001\002\000\020\051\uffd5\054\uffd5\056" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\001\002\000\032" +
    "\031\064\033\010\036\011\037\023\040\006\041\016\042" +
    "\017\043\013\044\026\045\020\046\021\047\005\001\002" +
    "\000\004\053\072\001\002\000\004\057\073\001\002\000" +
    "\010\043\100\045\076\046\075\001\002\000\020\051\uffdc" +
    "\054\uffdc\056\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\001" +
    "\002\000\020\051\uffda\054\uffda\056\uffda\061\uffda\062\uffda" +
    "\063\uffda\064\uffda\001\002\000\020\051\uffde\054\uffde\056" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\001\002\000\020" +
    "\051\uffdd\054\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd\064" +
    "\uffdd\001\002\000\020\051\uffdb\054\uffdb\056\uffdb\061\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\001\002\000\032\031\064\033" +
    "\010\036\011\037\023\040\006\041\016\042\017\043\013" +
    "\044\026\045\020\046\021\047\005\001\002\000\004\053" +
    "\103\001\002\000\004\057\104\001\002\000\010\043\110" +
    "\044\107\045\076\001\002\000\020\051\uffd9\054\uffd9\056" +
    "\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\001\002\000\020" +
    "\051\uffd8\054\uffd8\056\uffd8\061\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\001\002\000\020\051\uffd6\054\uffd6\056\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\001\002\000\020\051\uffd7\054" +
    "\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\001\002" +
    "\000\032\031\064\033\010\036\011\037\023\040\006\041" +
    "\016\042\017\043\013\044\026\045\020\046\021\047\005" +
    "\001\002\000\004\053\113\001\002\000\004\057\114\001" +
    "\002\000\004\045\076\001\002\000\020\051\uffdf\054\uffdf" +
    "\056\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000" +
    "\020\051\uffc6\054\uffc6\056\uffc6\061\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\001\002\000\042\031\042\032\034\033\010\035" +
    "\043\036\011\037\023\040\006\041\016\042\017\043\013" +
    "\044\026\045\020\046\021\047\005\050\033\062\040\001" +
    "\002\000\042\031\042\032\034\033\010\035\043\036\011" +
    "\037\023\040\006\041\016\042\017\043\013\044\026\045" +
    "\020\046\021\047\005\050\033\062\040\001\002\000\020" +
    "\051\uffcb\054\uffcb\056\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\001\002\000\020\051\uffcc\054\uffcc\056\uffcc\061\uffcc" +
    "\062\uffcc\063\uffcc\064\uffcc\001\002\000\042\031\042\032" +
    "\034\033\010\035\043\036\011\037\023\040\006\041\016" +
    "\042\017\043\013\044\026\045\020\046\021\047\005\050" +
    "\033\062\040\001\002\000\042\031\042\032\034\033\010" +
    "\035\043\036\011\037\023\040\006\041\016\042\017\043" +
    "\013\044\026\045\020\046\021\047\005\050\033\062\040" +
    "\001\002\000\020\051\uffce\054\uffce\056\uffce\061\uffce\062" +
    "\uffce\063\117\064\120\001\002\000\020\051\uffcf\054\uffcf" +
    "\056\uffcf\061\uffcf\062\uffcf\063\117\064\120\001\002\000" +
    "\010\051\130\061\123\062\124\001\002\000\020\051\uffc7" +
    "\054\uffc7\056\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\001" +
    "\002\000\052\005\147\006\154\007\155\010\162\024\150" +
    "\031\165\032\137\033\010\034\160\036\011\037\023\040" +
    "\006\041\016\042\017\043\013\044\026\045\020\046\021" +
    "\047\005\065\144\001\002\000\004\066\134\001\002\000" +
    "\004\002\000\001\002\000\052\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\024\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\065\uffc5\001\002\000\040\031" +
    "\165\032\137\033\010\034\160\036\011\037\023\040\006" +
    "\041\016\042\017\043\013\044\026\045\020\046\021\047" +
    "\005\065\144\001\002\000\054\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\014\uffab\024\uffab\031\uffab\032\uffab\033\uffab\034" +
    "\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\065\uffab\001\002\000" +
    "\066\005\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\015\uffb2" +
    "\016\uffb2\017\uffb2\022\uffb2\023\uffb2\024\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\065" +
    "\uffb2\001\002\000\056\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\014\uffa6\017\uffa6\024\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\065\uffa6\001\002\000" +
    "\054\005\uffa8\006\uffa8\007\uffa8\010\uffa8\014\uffa8\024\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\065\uffa8\001\002\000\056\005\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\014\uffa4\017\uffa4\024\uffa4\031\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\065\uffa4" +
    "\001\002\000\056\005\uffa3\006\uffa3\007\uffa3\010\uffa3\014" +
    "\uffa3\017\uffa3\024\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\065\uffa3\001\002\000\004" +
    "\050\310\001\002\000\040\031\165\032\137\033\010\034" +
    "\160\036\011\037\023\040\006\041\016\042\017\043\013" +
    "\044\026\045\020\046\021\047\005\065\144\001\002\000" +
    "\066\005\uffb3\006\uffb3\007\uffb3\010\uffb3\014\uffb3\015\uffb3" +
    "\016\uffb3\017\uffb3\022\uffb3\023\uffb3\024\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\065" +
    "\uffb3\001\002\000\004\066\302\001\002\000\004\066\301" +
    "\001\002\000\066\005\uffaf\006\uffaf\007\uffaf\010\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\047\uffaf\065\uffaf\001\002\000\050\005\147\006\154\010" +
    "\162\024\150\031\165\032\137\033\010\034\160\036\011" +
    "\037\023\040\006\041\016\042\017\043\013\044\026\045" +
    "\020\046\021\047\005\065\144\001\002\000\054\005\uffa9" +
    "\006\uffa9\007\uffa9\010\uffa9\014\uffa9\024\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\065" +
    "\uffa9\001\002\000\004\066\271\001\002\000\004\025\262" +
    "\001\002\000\056\005\uffa5\006\uffa5\007\uffa5\010\uffa5\014" +
    "\uffa5\017\uffa5\024\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\065\uffa5\001\002\000\054" +
    "\005\147\006\154\007\155\010\162\014\257\024\150\031" +
    "\165\032\137\033\010\034\160\036\011\037\023\040\006" +
    "\041\016\042\017\043\013\044\026\045\020\046\021\047" +
    "\005\065\144\001\002\000\066\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\065\uffb0\001\002\000\056\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\014\uff9e\017\uff9e\024\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\065\uff9e\001\002\000\004\066\255\001\002\000\006" +
    "\007\155\011\170\001\002\000\054\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\014\uffa7\024\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\065\uffa7\001\002" +
    "\000\066\005\uffb1\006\uffb1\007\uffb1\010\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\022\uffb1\023\uffb1\024\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1" +
    "\065\uffb1\001\002\000\010\007\uff92\011\uff92\020\uff92\001" +
    "\002\000\010\007\155\012\221\013\220\001\002\000\004" +
    "\066\212\001\002\000\004\011\170\001\002\000\010\007" +
    "\uff93\011\uff93\020\uff93\001\002\000\010\007\155\011\170" +
    "\020\uff96\001\002\000\004\020\177\001\002\000\010\007" +
    "\uff95\011\uff95\020\uff95\001\002\000\056\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\014\uff97\017\uff97\024\uff97\031\uff97\032" +
    "\uff97\033\uff97\034\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\065" +
    "\uff97\001\002\000\004\066\200\001\002\000\056\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\014\uffbe\017\uffbe\024\uffbe\031" +
    "\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\065\uffbe\001\002\000\010\007\uff94\011\uff94\020\uff94" +
    "\001\002\000\006\011\170\017\uff90\001\002\000\006\011" +
    "\uff8f\017\uff8f\001\002\000\004\017\206\001\002\000\006" +
    "\011\uff8d\017\uff8d\001\002\000\004\066\210\001\002\000" +
    "\010\007\uff91\011\uff91\020\uff91\001\002\000\066\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\020\uffb6\021\uffb6\024\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\065\uffb6\001\002" +
    "\000\006\011\uff8e\017\uff8e\001\002\000\010\007\uffbd\012" +
    "\uffbd\013\uffbd\001\002\000\012\007\uff87\012\uff87\013\uff87" +
    "\021\uff87\001\002\000\040\031\165\032\137\033\010\034" +
    "\160\036\011\037\023\040\006\041\016\042\017\043\013" +
    "\044\026\045\020\046\021\047\005\065\144\001\002\000" +
    "\004\021\246\001\002\000\012\007\uff8a\012\uff8a\013\uff8a" +
    "\021\uff8a\001\002\000\040\031\165\032\137\033\010\034" +
    "\160\036\011\037\023\040\006\041\016\042\017\043\013" +
    "\044\026\045\020\046\021\047\005\065\144\001\002\000" +
    "\004\066\237\001\002\000\004\066\236\001\002\000\012" +
    "\007\uff88\012\uff88\013\uff88\021\uff88\001\002\000\012\007" +
    "\155\012\221\013\220\021\uff8b\001\002\000\006\012\221" +
    "\013\220\001\002\000\012\007\uff86\012\uff86\013\uff86\021" +
    "\uff86\001\002\000\010\012\uff81\013\uff81\017\uff81\001\002" +
    "\000\004\017\206\001\002\000\010\012\uff80\013\uff80\017" +
    "\uff80\001\002\000\010\012\221\013\220\017\uff84\001\002" +
    "\000\010\012\uff83\013\uff83\017\uff83\001\002\000\010\012" +
    "\uff82\013\uff82\017\uff82\001\002\000\012\007\uff85\012\uff85" +
    "\013\uff85\021\uff85\001\002\000\012\007\uff89\012\uff89\013" +
    "\uff89\021\uff89\001\002\000\040\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\065\uffbb\001\002" +
    "\000\040\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\065\uffb9\001\002\000\004\023\243\001" +
    "\002\000\004\023\uff7c\001\002\000\014\007\uff7d\012\uff7d" +
    "\013\uff7d\017\uff7d\021\uff7d\001\002\000\004\066\244\001" +
    "\002\000\014\007\uffb8\012\uffb8\013\uffb8\017\uffb8\021\uffb8" +
    "\001\002\000\012\007\uff8c\011\uff8c\017\uff8c\020\uff8c\001" +
    "\002\000\004\066\247\001\002\000\012\007\uffbc\011\uffbc" +
    "\017\uffbc\020\uffbc\001\002\000\004\022\252\001\002\000" +
    "\004\022\uff7e\001\002\000\004\066\254\001\002\000\014" +
    "\007\uff7f\012\uff7f\013\uff7f\017\uff7f\021\uff7f\001\002\000" +
    "\014\007\uffba\012\uffba\013\uffba\017\uffba\021\uffba\001\002" +
    "\000\006\007\uffbf\011\uffbf\001\002\000\054\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\014\uffaa\024\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\065\uffaa" +
    "\001\002\000\004\066\261\001\002\000\004\002\uffb4\001" +
    "\002\000\004\002\uffc4\001\002\000\004\055\263\001\002" +
    "\000\032\031\064\033\010\036\011\037\023\040\006\041" +
    "\016\042\017\043\013\044\026\045\020\046\021\047\005" +
    "\001\002\000\004\026\265\001\002\000\004\055\266\001" +
    "\002\000\032\031\064\033\010\036\011\037\023\040\006" +
    "\041\016\042\017\043\013\044\026\045\020\046\021\047" +
    "\005\001\002\000\004\066\270\001\002\000\056\005\uffb7" +
    "\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\024\uffb7\031" +
    "\uffb7\032\uffb7\033\uffb7\034\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\065\uffb7\001\002\000\040\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043" +
    "\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\065\uffc1\001\002" +
    "\000\052\005\uff99\006\uff99\010\uff99\017\uff99\024\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\036\uff99\037\uff99\040\uff99" +
    "\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047" +
    "\uff99\065\uff99\001\002\000\052\005\uff9b\006\uff9b\010\uff9b" +
    "\017\uff9b\024\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\065\uff9b\001\002\000\004\017" +
    "\206\001\002\000\052\005\147\006\154\010\162\017\uff9c" +
    "\024\150\031\165\032\137\033\010\034\160\036\011\037" +
    "\023\040\006\041\016\042\017\043\013\044\026\045\020" +
    "\046\021\047\005\065\144\001\002\000\052\005\uff98\006" +
    "\uff98\010\uff98\017\uff98\024\uff98\031\uff98\032\uff98\033\uff98" +
    "\034\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\065\uff98\001\002" +
    "\000\052\005\uff9a\006\uff9a\010\uff9a\017\uff9a\024\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047" +
    "\uff9a\065\uff9a\001\002\000\054\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\014\uff9d\024\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\065\uff9d\001\002\000" +
    "\056\005\uffb5\006\uffb5\007\uffb5\010\uffb5\014\uffb5\017\uffb5" +
    "\024\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\065\uffb5\001\002\000\040\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\065" +
    "\uffc3\001\002\000\004\016\306\001\002\000\004\016\uff9f" +
    "\001\002\000\056\005\uffa0\006\uffa0\007\uffa0\010\uffa0\014" +
    "\uffa0\017\uffa0\024\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\065\uffa0\001\002\000\004" +
    "\066\307\001\002\000\056\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\014\uffc0\017\uffc0\024\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\065\uffc0\001\002" +
    "\000\032\033\010\035\043\036\011\037\023\040\006\041" +
    "\016\042\017\043\013\044\026\045\020\046\021\047\005" +
    "\001\002\000\004\051\uffad\001\002\000\004\051\314\001" +
    "\002\000\004\051\uffac\001\002\000\004\065\315\001\002" +
    "\000\066\005\uffae\006\uffae\007\uffae\010\uffae\014\uffae\015" +
    "\uffae\016\uffae\017\uffae\022\uffae\023\uffae\024\uffae\031\uffae" +
    "\032\uffae\033\uffae\034\uffae\036\uffae\037\uffae\040\uffae\041" +
    "\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae" +
    "\065\uffae\001\002\000\004\015\321\001\002\000\004\015" +
    "\uffa1\001\002\000\056\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\014\uffa2\017\uffa2\024\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\065\uffa2\001\002\000" +
    "\004\066\322\001\002\000\056\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\014\uffc2\017\uffc2\024\uffc2\031\uffc2\032\uffc2\033" +
    "\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\065\uffc2\001" +
    "\002\000\004\002\001\001\002\000\036\004\ufffa\027\ufffa" +
    "\030\ufffa\033\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\001\002" +
    "\000\010\054\uffea\056\uffea\060\031\001\002\000\006\054" +
    "\uffe9\056\uffe9\001\002\000\006\054\uffec\056\uffec\001\002" +
    "\000\006\054\332\056\331\001\002\000\030\033\010\036" +
    "\011\037\023\040\006\041\016\042\017\043\013\044\026" +
    "\045\020\046\021\047\005\001\002\000\036\004\ufffb\027" +
    "\ufffb\030\ufffb\033\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001" +
    "\002\000\006\054\uffeb\056\uffeb\001\002\000\036\004\ufffc" +
    "\027\ufffc\030\ufffc\033\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\022\002\023\003\026\004\003\005\013\010" +
    "\021\011\027\012\011\027\006\001\001\000\014\005\333" +
    "\010\021\011\027\012\011\027\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\327\007\326\010\325" +
    "\011\324\012\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\074\132\077\130\001\001\000\002\001\001" +
    "\000\020\011\043\012\011\013\040\030\031\031\034\032" +
    "\036\033\035\001\001\000\002\001\001\000\020\011\043" +
    "\012\011\013\040\030\031\031\126\032\036\033\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\043\012\011\013\040\030" +
    "\031\033\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\052\015" +
    "\056\016\046\017\047\020\045\021\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\061\012\011\026\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\061\012\011\026\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\073\023\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\061\012\011\026\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\105\024\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\061\012" +
    "\011\026\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\043\012\011\013\040\030\031\033\121" +
    "\001\001\000\014\011\043\012\011\013\040\030\031\033" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\043\012\011\013\040\030\031\032\125\033\035\001" +
    "\001\000\016\011\043\012\011\013\040\030\031\032\124" +
    "\033\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\011\145\012\011" +
    "\034\137\036\155\040\141\050\152\051\140\065\142\066" +
    "\150\073\163\075\156\076\135\101\134\103\144\105\162" +
    "\115\151\117\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\011\145\012\011\035\315" +
    "\066\150\073\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\011\145\012" +
    "\011\037\302\066\150\073\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\011\145\012\011\034\137\036\155\040\141\050\271" +
    "\052\273\053\274\054\272\065\142\066\150\073\275\101" +
    "\134\103\144\105\162\117\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\011\145\012\011\034\137\036\155\040\141\050\152" +
    "\051\140\065\142\066\150\073\163\076\255\100\257\101" +
    "\134\103\144\105\162\115\151\117\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\041" +
    "\173\042\171\055\165\067\172\070\174\107\166\115\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\043\214\044\221\046\212\061\224\071\222" +
    "\072\215\111\213\113\216\115\223\001\001\000\002\001" +
    "\001\000\014\042\204\056\203\057\201\060\202\107\166" +
    "\001\001\000\002\001\001\000\014\042\171\055\165\070" +
    "\200\107\166\115\170\001\001\000\004\106\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\204\060\210" +
    "\107\166\001\001\000\002\001\001\000\004\116\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\145\012\011\045\247\066\150" +
    "\073\250\001\001\000\004\110\244\001\001\000\002\001" +
    "\001\000\014\011\145\012\011\047\237\066\150\073\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\221\046\212\061\224\072\234\111\213" +
    "\113\216\115\223\001\001\000\020\044\227\046\225\062" +
    "\226\063\230\064\231\111\213\113\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\116\233\001\001\000" +
    "\002\001\001\000\014\044\227\046\225\064\232\111\213" +
    "\113\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\061\012\011\026\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\061" +
    "\012\011\026\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\116\277\001\001\000\036\011\145\012\011\034" +
    "\137\036\155\040\141\050\271\054\276\065\142\066\150" +
    "\073\275\101\134\103\144\105\162\117\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\104\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\310\012\011\013\312\025\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\332\010\325\011\324\012\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CopyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CopyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CopyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 	
  
    public CopyParser(CopyLexer lexer){
        super(lexer);		
    }

    public void syntax_error(Symbol cur_token) {        
		List<Integer> tokens = expected_token_ids();
        int line = cur_token.left;
        int column = cur_token.right;
        String lexeme = symbl_name_from_id(cur_token.sym);
        String des = "Se esperaba:    \n";
        boolean count = false;
		for(Integer i : tokens) {	
            String fromId = symbl_name_from_id(i);                        
			des += fromId +" o ";                        
            count = true;
		}
        des = des.substring(0, des.length() - 3);

        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Error sintáctico ln:"+line+" col:"+column+ " " +lexeme + "\n");
		if(count) ClientError.getError().log(des+"\n");
	}

    public void report_fatal_error(String message, Object info) {
        ClientError.getError().log("COPY:\n");
		ClientError.getError().log("Message: " + message);
		ClientError.getError().log("Info: " + info.toString());		
	}
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CopyParser$actions {
  private final CopyParser parser;

  /** Constructor */
  CUP$CopyParser$actions(CopyParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CopyParser$do_action_part00000000(
    int                        CUP$CopyParser$act_num,
    java_cup.runtime.lr_parser CUP$CopyParser$parser,
    java.util.Stack            CUP$CopyParser$stack,
    int                        CUP$CopyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CopyParser$result;

      /* select the action based on the action number */
      switch (CUP$CopyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initialState EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		RESULT = start_val;
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CopyParser$parser.done_parsing();
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initialState ::= field_definitions_opt html_declarator 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("initialState",0, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // field_definitions_opt ::= 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions_opt",1, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // field_definitions_opt ::= field_definitions 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions_opt",1, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // field_definitions ::= field_definition 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions",2, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // field_definitions ::= field_definitions field_definition 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definitions",2, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_definition ::= type variable_declarators SEMICOLON 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		ArrayList<CopyVariable> arr = (ArrayList<CopyVariable>)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		
                    arr.forEach(v -> {
                            v.setType(type);
                            if(v.op == null){
                                ParseCopy.getCopy().addVariable(v);
                            }else{
                                ParseCopy.getCopy().addVariable(v, v.op);
                            }
                            
                        });
                
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definition",3, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_definition ::= variable_assignment SEMICOLON 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		CopyVariable v = (CopyVariable)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		
                        ParseCopy.getCopy().reAssignVariable(v.getName(), v.op);
                   
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("field_definition",3, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // name ::= IDENTIFIER 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= reserved 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reserved ::= SCORE 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reserved ::= CLASES 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reserved ::= METODOS 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reserved ::= VARIABLES 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reserved ::= COMENTARIOS 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // reserved ::= TIPO 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // reserved ::= FUNCION 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // reserved ::= NOMBRE 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // reserved ::= PARAMETROS 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved ::= TEXTO_COMENTARIO 
            {
              String RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=st;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("reserved",8, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variable_assignment ::= name EQ operation 
            {
              CopyVariable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                            CopyVariable v = new CopyVariable(name, 0, op);
                            RESULT=v;
                        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_assignment",6, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declarators ::= variable_declarator 
            {
              ArrayList<CopyVariable> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		CopyVariable v = (CopyVariable)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                            ArrayList<CopyVariable> arr = new ArrayList();
                            arr.add(v);
                            RESULT=arr;
                        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",4, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declarators ::= variable_declarators COMMA variable_declarator 
            {
              ArrayList<CopyVariable> RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		ArrayList<CopyVariable> arr = (ArrayList<CopyVariable>)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		CopyVariable v = (CopyVariable)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		                            
                            arr.add(v);
                            RESULT=arr;
                        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarators",4, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_declarator ::= name 
            {
              CopyVariable RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                            CopyVariable v = new CopyVariable(name, 0);
                            RESULT=v;
                        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",5, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declarator ::= variable_assignment 
            {
              CopyVariable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		CopyVariable v = (CopyVariable)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		                        
                        RESULT=v;
                    
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("variable_declarator",5, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // integer_value ::= name 
            {
              String RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("integer_value",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // integer_value ::= INTEGER_LITERAL 
            {
              String RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("integer_value",20, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // access_result ::= RESULT DOT result_variables 
            {
              Value RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_result",9, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // result_variables ::= access_score 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // result_variables ::= access_classes 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // result_variables ::= access_methods 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // result_variables ::= access_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // result_variables ::= access_comments 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("result_variables",15, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // access_score ::= SCORE 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_score",10, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // access_classes ::= CLASES LBRACKET integer_value RBRACKET DOT class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_classes",13, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // class_variables ::= NOMBRE 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("class_variables",16, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // access_methods ::= METODOS LBRACKET integer_value RBRACKET DOT method_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_methods",12, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_variables ::= class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",17, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // method_variables ::= TIPO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",17, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // method_variables ::= PARAMETROS 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("method_variables",17, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_variables ::= VARIABLES LBRACKET integer_value RBRACKET DOT var_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_variables",11, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var_variables ::= class_variables 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",18, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var_variables ::= TIPO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",18, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var_variables ::= FUNCION 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("var_variables",18, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // access_comments ::= COMENTARIOS LBRACKET integer_value RBRACKET DOT TEXTO_COMENTARIO 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("access_comments",14, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-5)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type ::= STRING 
            {
              Integer RESULT =null;
		
                RESULT=Value.STRING;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type ::= INTEGER 
            {
              Integer RESULT =null;
		
                RESULT=Value.INTEGER;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // values ::= STRING_LITERAL 
            {
              Value RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=new Value(st, Value.STRING);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // values ::= access_result 
            {
              Value RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=val;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // values ::= INTEGER_LITERAL 
            {
              Value RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=new Value(st, Value.INTEGER);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values",22, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operation ::= operation PLUS term 
            {
              Operation RESULT =null;
		int opLleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		Operation opL = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation opR = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                RESULT=new Operation(Operation.SUMA, opL, opR, sleft);
            
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operation ::= operation MINUS term 
            {
              Operation RESULT =null;
		int opLleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		Operation opL = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation opR = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                RESULT=new Operation(Operation.RESTA, opL, opR, sleft);
            
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operation ::= term 
            {
              Operation RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation term = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                RESULT=term;
            
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("operation",23, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= term MULT factor 
            {
              Operation RESULT =null;
		int opLleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		Operation opL = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation opR = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
                RESULT=new Operation(Operation.MULTIPLICACION, opL, opR, sleft);
            
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= term DIV factor 
            {
              Operation RESULT =null;
		int opLleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).left;
		int opLright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).right;
		Operation opL = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		int opRleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int opRright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation opR = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=new Operation(Operation.DIVISION, opL, opR, sleft);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor 
            {
              Operation RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation factor = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=factor;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("term",24, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= values 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Value val = (Value)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT = new Operation(val, valleft);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= name 
            {
              Operation RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT = new Operation(name, nameleft);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= LPAREN operation RPAREN 
            {
              Operation RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Operation op = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		
            RESULT=op;
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= MINUS factor 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)).value;
		int factorleft = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()).right;
		Operation factor = (Operation)((java_cup.runtime.Symbol) CUP$CopyParser$stack.peek()).value;
		
            RESULT=new Operation(Operation.NEGACION, factor, null, sleft);
        
              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("factor",25, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // html_tag_open ::= HTML_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_tag_open",61, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // html_tag_close ::= HTML_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_tag_close",62, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // h1_tag_open ::= H1_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag_open",63, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // h1_tag_close ::= H1_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag_close",64, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // h2_tag_open ::= H2_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag_open",65, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // h2_tag_close ::= H2_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag_close",66, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // table_tag_open ::= TABLE_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag_open",67, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // table_tag_close ::= TABLE_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag_close",68, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tr_tag_open ::= TR_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag_open",69, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tr_tag_close ::= TR_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag_close",70, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // th_tag_open ::= TH_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag_open",71, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // th_tag_close ::= TH_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag_close",72, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // td_tag_open ::= TD_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag_open",73, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // td_tag_close ::= TD_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag_close",74, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // for_tag_open ::= FOR_OPEN ITERADOR COLON integer_value HASTA COLON integer_value GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag_open",75, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-7)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // for_tag_close ::= FOR_CLOSE GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag_close",76, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // br_tag_open ::= BR_OPEN GT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("br_tag_open",77, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // html_declarator ::= html_tag_open html_body html_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_declarator",58, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // values_html ::= name 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // values_html ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // values_html ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // values_html ::= TEXT 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // values_html ::= call_variable 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("values_html",57, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // call_variable ::= DPESOS LPAREN id_call RPAREN DPESOS 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("call_variable",52, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-4)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // id_call ::= name 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("id_call",19, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // id_call ::= access_result 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("id_call",19, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // html_body ::= html_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_body",59, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // html_body ::= html_body html_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_body",59, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // html_element ::= html_element_no_for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",60, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // html_element ::= for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",60, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // html_element ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element",60, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // html_element_no_for_tag ::= h1_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",38, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // html_element_no_for_tag ::= h2_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",38, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // html_element_no_for_tag ::= table_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",38, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // html_element_no_for_tag ::= br_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("html_element_no_for_tag",38, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // h1_tag ::= h1_tag_open h1_body h1_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_tag",26, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // h1_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h1_body",27, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // h2_tag ::= h2_tag_open h2_body h2_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_tag",28, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // h2_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("h2_body",29, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // br_tag ::= br_tag_open 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("br_tag",51, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_tag ::= for_tag_open for_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tag",39, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_body ::= for_body_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body",40, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_body_elements ::= for_body_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_elements",41, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_body_elements ::= for_body_elements for_body_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_elements",41, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // for_body_element ::= html_element_no_for_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_element",42, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // for_body_element ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_body_element",42, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // table_tag ::= table_tag_open table_body table_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_tag",30, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // table_body ::= table_elemets 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_body",31, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // table_elemets ::= table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_elemets",53, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // table_elemets ::= table_elemets table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_elemets",53, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // table_element ::= tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_element",54, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // table_element ::= for_table_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("table_element",54, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // for_table_tag ::= for_tag_open for_table_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_tag",43, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // for_table_body ::= for_table_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_body",44, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // for_table_elements ::= for_table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_elements",45, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // for_table_elements ::= for_table_elements for_table_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_elements",45, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // for_table_element ::= tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_table_element",46, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tr_tag ::= tr_tag_open tr_body tr_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_tag",32, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tr_body ::= tr_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_body",33, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tr_elements ::= tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_elements",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tr_elements ::= tr_elements tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_elements",55, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tr_element ::= th_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",56, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tr_element ::= td_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",56, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // tr_element ::= for_tr_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("tr_element",56, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for_tr_tag ::= for_tag_open for_tr_body for_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_tag",47, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for_tr_body ::= for_tr_elements 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_body",48, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for_tr_elements ::= for_tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_elements",49, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // for_tr_elements ::= for_tr_elements for_tr_element 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_elements",49, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-1)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // for_tr_element ::= td_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_element",50, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // for_tr_element ::= th_tag 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("for_tr_element",50, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // th_tag ::= th_tag_open th_body th_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_tag",34, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // th_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("th_body",35, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // td_tag ::= td_tag_open td_body td_tag_close 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_tag",36, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.elementAt(CUP$CopyParser$top-2)), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // td_body ::= values_html 
            {
              Object RESULT =null;

              CUP$CopyParser$result = parser.getSymbolFactory().newSymbol("td_body",37, ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CopyParser$stack.peek()), RESULT);
            }
          return CUP$CopyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CopyParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CopyParser$do_action(
    int                        CUP$CopyParser$act_num,
    java_cup.runtime.lr_parser CUP$CopyParser$parser,
    java.util.Stack            CUP$CopyParser$stack,
    int                        CUP$CopyParser$top)
    throws java.lang.Exception
    {
              return CUP$CopyParser$do_action_part00000000(
                               CUP$CopyParser$act_num,
                               CUP$CopyParser$parser,
                               CUP$CopyParser$stack,
                               CUP$CopyParser$top);
    }
}

}
