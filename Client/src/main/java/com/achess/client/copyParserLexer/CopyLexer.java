// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: CopyLexer.flex

package com.achess.client.copyParserLexer;
import java_cup.runtime.Symbol;
import com.achess.client.error.ClientError;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CopyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\3\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\7\u1f00\1\u6200\1\u6300"+
    "\4\u1f00\1\u6400\21\u1f00\246\u0100\1\u6500\20\u0100\1\u6600\1\u6700"+
    "\25\u0100\1\u6800\34\u0100\1\u6900\14\u1f00\2\u0100\1\u6a00\u0b05\u1f00"+
    "\1\u6b00\1\u6c00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\2\6\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\7\25\1\26\1\27\1\30\1\31\1\32"+
    "\2\6\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\41\1\44\1\45\1\46\1\47\1\50"+
    "\1\41\1\51\1\52\1\53\1\54\1\55\4\41\1\56"+
    "\1\57\1\60\1\6\1\41\1\6\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\42\1\70\2\41\1\71"+
    "\1\72\1\73\1\74\1\75\1\41\1\76\1\77\1\100"+
    "\1\101\2\41\1\102\2\41\4\6\6\0\1\103\32\0"+
    "\2\6\4\41\4\6\1\41\2\6\1\0\7\6\1\41"+
    "\4\6\1\41\5\6\27\41\1\6\37\41\1\6\u01ca\41"+
    "\4\6\14\41\16\6\5\41\7\6\1\41\1\6\1\41"+
    "\21\6\160\0\5\41\1\6\2\41\2\6\4\41\1\6"+
    "\1\41\6\6\1\41\1\6\3\41\1\6\1\41\1\6"+
    "\24\41\1\6\123\41\1\6\213\41\1\6\5\0\2\6"+
    "\246\41\1\6\46\41\2\6\1\41\7\6\47\41\7\6"+
    "\1\41\1\6\55\0\1\6\1\0\1\6\2\0\1\6"+
    "\2\0\1\6\1\0\10\6\33\41\5\6\3\41\15\6"+
    "\6\0\5\6\1\41\4\6\13\0\1\6\1\0\3\6"+
    "\53\41\37\0\4\6\2\41\1\0\143\41\1\6\1\41"+
    "\10\0\1\6\6\0\2\41\2\0\1\6\4\0\2\41"+
    "\12\0\3\41\2\6\1\41\17\6\1\0\1\41\1\0"+
    "\36\41\33\0\2\6\131\41\13\0\1\41\16\6\12\0"+
    "\41\41\11\0\2\41\4\6\1\41\5\6\26\41\4\0"+
    "\1\41\11\0\1\41\3\0\1\41\5\0\22\6\31\41"+
    "\3\0\4\6\13\41\65\6\25\41\1\6\10\41\26\6"+
    "\60\0\66\41\3\0\1\41\22\0\1\41\7\0\12\41"+
    "\2\0\2\6\12\0\1\6\20\41\3\0\1\6\10\41"+
    "\2\6\2\41\2\6\26\41\1\6\7\41\1\6\1\41"+
    "\3\6\4\41\2\6\1\0\1\41\7\0\2\6\2\0"+
    "\2\6\3\0\1\41\10\6\1\0\4\6\2\41\1\6"+
    "\3\41\2\0\2\6\12\0\4\41\7\6\2\41\4\6"+
    "\3\0\1\6\6\41\4\6\2\41\2\6\26\41\1\6"+
    "\7\41\1\6\2\41\1\6\2\41\1\6\2\41\2\6"+
    "\1\0\1\6\5\0\4\6\2\0\2\6\3\0\3\6"+
    "\1\0\7\6\4\41\1\6\1\41\7\6\14\0\3\41"+
    "\1\0\13\6\3\0\1\6\11\41\1\6\3\41\1\6"+
    "\26\41\1\6\7\41\1\6\2\41\1\6\5\41\2\6"+
    "\1\0\1\41\10\0\1\6\3\0\1\6\3\0\2\6"+
    "\1\41\17\6\2\41\2\0\2\6\12\0\1\6\1\41"+
    "\7\6\1\41\6\0\1\6\3\0\1\6\10\41\2\6"+
    "\2\41\2\6\26\41\1\6\7\41\1\6\2\41\1\6"+
    "\5\41\2\6\1\0\1\41\7\0\2\6\2\0\2\6"+
    "\3\0\10\6\2\0\4\6\2\41\1\6\3\41\2\0"+
    "\2\6\12\0\1\6\1\41\20\6\1\0\1\41\1\6"+
    "\6\41\3\6\3\41\1\6\4\41\3\6\2\41\1\6"+
    "\1\41\1\6\2\41\3\6\2\41\3\6\3\41\3\6"+
    "\14\41\4\6\5\0\3\6\3\0\1\6\4\0\2\6"+
    "\1\41\6\6\1\0\16\6\12\0\11\6\1\41\6\6"+
    "\4\0\1\6\10\41\1\6\3\41\1\6\27\41\1\6"+
    "\20\41\3\6\1\41\7\0\1\6\3\0\1\6\4\0"+
    "\7\6\2\0\1\6\3\41\5\6\2\41\2\0\2\6"+
    "\12\0\20\6\1\41\3\0\1\6\10\41\1\6\3\41"+
    "\1\6\27\41\1\6\12\41\1\6\5\41\2\6\1\0"+
    "\1\41\7\0\1\6\3\0\1\6\4\0\7\6\2\0"+
    "\7\6\1\41\1\6\2\41\2\0\2\6\12\0\1\6"+
    "\2\41\15\6\4\0\1\6\10\41\1\6\3\41\1\6"+
    "\51\41\2\0\1\41\7\0\1\6\3\0\1\6\4\0"+
    "\1\41\5\6\3\41\1\0\7\6\3\41\2\0\2\6"+
    "\12\0\12\6\6\41\2\6\2\0\1\6\22\41\3\6"+
    "\30\41\1\6\11\41\1\6\1\41\2\6\7\41\3\6"+
    "\1\0\4\6\6\0\1\6\1\0\1\6\10\0\6\6"+
    "\12\0\2\6\2\0\15\6\60\41\1\0\2\41\7\0"+
    "\4\6\10\41\10\0\1\6\12\0\47\6\2\41\1\6"+
    "\1\41\2\6\2\41\1\6\1\41\2\6\1\41\6\6"+
    "\4\41\1\6\7\41\1\6\3\41\1\6\1\41\1\6"+
    "\1\41\2\6\2\41\1\6\4\41\1\0\2\41\6\0"+
    "\1\6\2\0\1\41\2\6\5\41\1\6\1\41\1\6"+
    "\6\0\2\6\12\0\2\6\4\41\40\6\1\41\27\6"+
    "\2\0\6\6\12\0\13\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\2\0\10\41\1\6\44\41\4\6\24\0"+
    "\1\6\2\0\5\41\13\0\1\6\44\0\11\6\1\0"+
    "\71\6\53\41\24\0\1\41\12\0\6\6\6\41\4\0"+
    "\4\41\3\0\1\41\3\0\2\41\7\0\3\41\4\0"+
    "\15\41\14\0\1\41\17\0\2\6\46\41\1\6\1\41"+
    "\5\6\1\41\2\6\53\41\1\6\115\41\1\6\4\41"+
    "\2\6\7\41\1\6\1\41\1\6\4\41\2\6\51\41"+
    "\1\6\4\41\2\6\41\41\1\6\4\41\2\6\7\41"+
    "\1\6\1\41\1\6\4\41\2\6\17\41\1\6\71\41"+
    "\1\6\4\41\2\6\103\41\2\6\3\0\40\6\20\41"+
    "\20\6\126\41\2\6\6\41\3\6\u016c\41\2\6\21\41"+
    "\1\6\32\41\5\6\113\41\3\6\13\41\7\6\15\41"+
    "\1\6\4\41\3\0\13\6\22\41\3\0\13\6\22\41"+
    "\2\0\14\6\15\41\1\6\3\41\1\6\2\0\14\6"+
    "\64\41\40\0\3\6\1\41\3\6\2\41\1\0\2\6"+
    "\12\0\41\6\4\0\1\6\12\0\6\6\130\41\10\6"+
    "\5\41\2\0\42\41\1\0\1\41\5\6\106\41\12\6"+
    "\37\41\1\6\14\0\4\6\14\0\12\6\12\0\36\41"+
    "\2\6\5\41\13\6\54\41\4\6\32\41\6\6\12\0"+
    "\46\6\27\41\5\0\4\6\65\41\12\0\1\6\35\0"+
    "\2\6\13\0\6\6\12\0\15\6\1\41\10\6\16\0"+
    "\102\6\5\0\57\41\21\0\7\41\4\6\12\0\21\6"+
    "\11\0\14\6\3\0\36\41\15\0\2\41\12\0\54\41"+
    "\16\0\14\6\44\41\24\0\10\6\12\0\3\6\3\41"+
    "\12\0\44\41\2\6\11\41\107\6\3\0\1\6\25\0"+
    "\4\41\1\0\4\41\3\0\2\41\3\0\6\6\300\41"+
    "\72\0\1\6\5\0\26\41\2\6\6\41\2\6\46\41"+
    "\2\6\6\41\2\6\10\41\1\6\1\41\1\6\1\41"+
    "\1\6\1\41\1\6\37\41\2\6\65\41\1\6\7\41"+
    "\1\6\1\41\3\6\3\41\1\6\7\41\3\6\4\41"+
    "\2\6\6\41\4\6\15\41\5\6\3\41\1\6\7\41"+
    "\16\6\5\0\30\6\2\3\5\0\20\6\2\41\23\6"+
    "\1\41\13\6\5\0\1\6\12\0\1\6\1\41\15\6"+
    "\1\41\20\6\15\41\3\6\40\41\20\6\15\0\4\6"+
    "\1\0\3\6\14\0\21\6\1\41\4\6\1\41\2\6"+
    "\12\41\1\6\1\41\3\6\5\41\6\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\4\41\1\6\13\41\2\6"+
    "\4\41\5\6\5\41\4\6\1\41\21\6\51\41\u0177\6"+
    "\57\41\1\6\57\41\1\6\205\41\6\6\4\41\3\0"+
    "\2\41\14\6\46\41\1\6\1\41\5\6\1\41\2\6"+
    "\70\41\7\6\1\41\17\6\1\0\27\41\11\6\7\41"+
    "\1\6\7\41\1\6\7\41\1\6\7\41\1\6\7\41"+
    "\1\6\7\41\1\6\7\41\1\6\7\41\1\6\40\0"+
    "\57\6\1\41\325\6\3\41\31\6\11\41\6\0\1\6"+
    "\5\41\2\6\5\41\4\6\126\41\2\6\2\0\2\6"+
    "\3\41\1\6\132\41\1\6\4\41\5\6\52\41\2\6"+
    "\136\41\21\6\33\41\65\6\306\41\112\6\353\41\25\6"+
    "\215\41\103\6\56\41\2\6\15\41\3\6\20\41\12\0"+
    "\2\41\24\6\57\41\1\0\4\6\12\0\1\6\37\41"+
    "\2\0\120\41\2\0\45\6\11\41\2\6\147\41\2\6"+
    "\44\41\1\6\10\41\77\6\13\41\1\0\3\41\1\0"+
    "\4\41\1\0\27\41\5\0\20\6\1\41\7\6\64\41"+
    "\14\6\2\0\62\41\22\0\12\6\12\0\6\6\22\0"+
    "\6\41\3\6\1\41\1\6\1\41\2\6\12\0\34\41"+
    "\10\0\2\6\27\41\15\0\14\6\35\41\3\6\4\0"+
    "\57\41\16\0\16\6\1\41\12\0\6\6\5\41\1\0"+
    "\12\41\12\0\5\41\1\6\51\41\16\0\11\6\3\41"+
    "\1\0\10\41\2\0\2\6\12\0\6\6\27\41\3\6"+
    "\1\41\3\0\62\41\1\0\1\41\3\0\2\41\2\0"+
    "\5\41\2\0\1\41\1\0\1\41\30\6\3\41\2\6"+
    "\13\41\5\0\2\6\3\41\2\0\12\6\6\41\2\6"+
    "\6\41\2\6\6\41\11\6\7\41\1\6\7\41\1\6"+
    "\53\41\1\6\12\41\12\6\163\41\10\0\1\6\2\0"+
    "\2\6\12\0\6\6\244\41\14\6\27\41\4\6\61\41"+
    "\4\6\u0100\3\156\41\2\6\152\41\46\6\7\41\14\6"+
    "\5\41\5\6\1\41\1\0\12\41\1\6\15\41\1\6"+
    "\5\41\1\6\1\41\1\6\2\41\1\6\2\41\1\6"+
    "\154\41\41\6\153\41\22\6\100\41\2\6\66\41\50\6"+
    "\15\41\3\6\20\0\20\6\20\0\3\6\2\41\30\6"+
    "\3\41\31\6\1\41\6\6\5\41\1\6\207\41\2\6"+
    "\1\0\4\6\1\41\13\6\12\0\7\6\32\41\4\6"+
    "\1\41\1\6\32\41\13\6\131\41\3\6\6\41\2\6"+
    "\6\41\2\6\6\41\2\6\3\41\3\6\2\41\3\6"+
    "\2\41\22\6\3\0\4\6\14\41\1\6\32\41\1\6"+
    "\23\41\1\6\2\41\1\6\17\41\2\6\16\41\42\6"+
    "\173\41\105\6\65\41\210\6\1\0\202\6\35\41\3\6"+
    "\61\41\17\6\1\0\37\6\40\41\15\6\36\41\5\6"+
    "\46\41\5\0\5\6\36\41\2\6\44\41\4\6\10\41"+
    "\1\6\5\41\52\6\236\41\2\6\12\0\6\6\44\41"+
    "\4\6\44\41\4\6\50\41\10\6\64\41\234\6\67\41"+
    "\11\6\26\41\12\6\10\41\230\6\6\41\2\6\1\41"+
    "\1\6\54\41\1\6\2\41\3\6\1\41\2\6\27\41"+
    "\12\6\27\41\11\6\37\41\101\6\23\41\1\6\2\41"+
    "\12\6\26\41\12\6\32\41\106\6\70\41\6\6\2\41"+
    "\100\6\1\41\3\0\1\6\2\0\5\6\4\0\4\41"+
    "\1\6\3\41\1\6\33\41\4\6\3\0\4\6\1\0"+
    "\40\6\35\41\3\6\35\41\43\6\10\41\1\6\34\41"+
    "\2\0\31\6\66\41\12\6\26\41\12\6\23\41\15\6"+
    "\22\41\156\6\111\41\67\6\63\41\15\6\63\41\15\6"+
    "\3\0\65\41\17\0\37\6\12\0\17\6\4\0\55\41"+
    "\13\0\2\6\1\0\22\6\31\41\7\6\12\0\6\6"+
    "\3\0\44\41\16\0\1\6\12\0\20\6\43\41\1\0"+
    "\2\6\1\41\11\6\3\0\60\41\16\0\4\41\5\6"+
    "\3\0\3\6\12\0\1\41\1\6\1\41\43\6\22\41"+
    "\1\6\31\41\14\0\6\6\1\0\101\6\7\41\1\6"+
    "\1\41\1\6\4\41\1\6\17\41\1\6\12\41\7\6"+
    "\57\41\14\0\5\6\12\0\6\6\4\0\1\6\10\41"+
    "\2\6\2\41\2\6\26\41\1\6\7\41\1\6\2\41"+
    "\1\6\5\41\2\6\1\0\1\41\7\0\2\6\2\0"+
    "\2\6\3\0\2\6\1\41\6\6\1\0\5\6\5\41"+
    "\2\0\2\6\7\0\3\6\5\0\213\6\65\41\22\0"+
    "\4\41\5\6\12\0\46\6\60\41\24\0\2\41\1\6"+
    "\1\41\10\6\12\0\246\6\57\41\7\0\2\6\11\0"+
    "\27\6\4\41\2\0\42\6\60\41\21\0\3\6\1\41"+
    "\13\6\12\0\46\6\53\41\15\0\10\6\12\0\66\6"+
    "\32\41\3\6\17\0\4\6\12\0\u0166\6\100\41\12\0"+
    "\25\6\2\41\12\0\50\41\7\0\1\41\4\0\10\6"+
    "\1\0\10\6\1\41\13\0\50\41\2\6\4\41\20\0"+
    "\46\6\71\41\7\6\11\41\1\6\45\41\10\0\1\6"+
    "\10\0\1\41\17\6\12\0\30\6\36\41\2\6\26\0"+
    "\1\6\16\0\111\6\7\41\1\6\2\41\1\6\46\41"+
    "\6\0\3\6\1\0\1\6\2\0\1\6\7\0\1\41"+
    "\1\0\10\6\12\0\246\6\232\41\146\6\157\41\21\6"+
    "\304\41\274\6\57\41\321\6\107\41\271\6\71\41\7\6"+
    "\37\41\1\6\12\0\146\6\36\41\2\6\5\0\13\6"+
    "\60\41\7\0\11\6\4\41\14\6\12\0\11\6\25\41"+
    "\5\6\23\41\160\6\105\41\13\6\1\41\56\0\20\6"+
    "\4\0\15\41\100\6\2\41\36\6\355\41\23\6\363\41"+
    "\15\6\37\41\121\6\u018c\41\4\6\153\41\5\6\15\41"+
    "\3\6\11\41\7\6\12\41\3\6\2\0\1\6\4\0"+
    "\301\6\5\0\3\6\26\0\2\6\7\0\36\6\4\0"+
    "\224\6\3\0\273\6\125\41\1\6\107\41\1\6\2\41"+
    "\2\6\1\41\2\6\2\41\2\6\4\41\1\6\14\41"+
    "\1\6\1\41\1\6\7\41\1\6\101\41\1\6\4\41"+
    "\2\6\10\41\1\6\7\41\1\6\34\41\1\6\4\41"+
    "\1\6\5\41\1\6\1\41\3\6\7\41\1\6\u0154\41"+
    "\2\6\31\41\1\6\31\41\1\6\37\41\1\6\31\41"+
    "\1\6\37\41\1\6\31\41\1\6\37\41\1\6\31\41"+
    "\1\6\37\41\1\6\31\41\1\6\10\41\2\6\151\0"+
    "\4\6\62\0\10\6\1\0\16\6\1\0\26\6\5\0"+
    "\1\6\17\0\120\6\7\0\1\6\21\0\2\6\7\0"+
    "\1\6\2\0\1\6\5\0\325\6\305\41\13\6\7\0"+
    "\51\6\104\41\7\0\5\6\12\0\246\6\4\41\1\6"+
    "\33\41\1\6\2\41\1\6\1\41\2\6\1\41\1\6"+
    "\12\41\1\6\4\41\1\6\1\41\1\6\1\41\6\6"+
    "\1\41\4\6\1\41\1\6\1\41\1\6\1\41\1\6"+
    "\3\41\1\6\2\41\1\6\1\41\2\6\1\41\1\6"+
    "\1\41\1\6\1\41\1\6\1\41\1\6\1\41\1\6"+
    "\2\41\1\6\1\41\2\6\4\41\1\6\7\41\1\6"+
    "\4\41\1\6\4\41\1\6\1\41\1\6\12\41\1\6"+
    "\21\41\5\6\3\41\1\6\5\41\1\6\21\41\104\6"+
    "\327\41\51\6\65\41\13\6\336\41\2\6\u0182\41\16\6"+
    "\u0131\41\37\6\36\41\343\6\1\0\36\6\140\0\200\6"+
    "\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\3\1\21\1\22\14\5\1\23\1\24"+
    "\1\5\1\25\2\26\1\27\1\3\1\30\5\0\17\5"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\5\0\1\42\1\0\1\43\1\44\2\0\1\45"+
    "\1\46\1\47\17\5\1\0\1\50\1\0\1\51\1\52"+
    "\2\0\1\53\1\54\1\55\1\56\2\0\15\5\1\57"+
    "\1\5\1\50\1\60\2\0\1\61\1\0\3\5\1\62"+
    "\6\5\1\63\1\5\1\64\1\5\1\65\1\0\1\66"+
    "\1\67\5\5\1\70\1\5\1\71\1\72\1\5\1\73"+
    "\1\5\1\74\1\5\1\75\1\76\3\5\1\77\4\5"+
    "\1\100\1\5\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\314\0\u0110\0\314\0\u0154"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\210\0\u0198\0\314\0\314\0\u01dc\0\314\0\314\0\u0220"+
    "\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440"+
    "\0\u0484\0\u04c8\0\u050c\0\314\0\314\0\u0550\0\u0594\0\314"+
    "\0\u05d8\0\314\0\u061c\0\u0220\0\u0660\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\314\0\u0d04"+
    "\0\314\0\314\0\u0d48\0\u0d8c\0\314\0\314\0\314\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u0bb0"+
    "\0\u1210\0\u0bb0\0\u0bb0\0\u1254\0\u1298\0\u0bb0\0\u0bb0\0\u0bb0"+
    "\0\314\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u0220\0\u16d8\0\314\0\u0bb0\0\u171c\0\u1760\0\314\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u0220\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\u1a08\0\u0220\0\u1a4c\0\u0220\0\u1a90\0\u0bb0\0\u1ad4"+
    "\0\314\0\u0220\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u0220"+
    "\0\u1c6c\0\u0220\0\u0220\0\u1cb0\0\u0bb0\0\u1cf4\0\u0220\0\u1d38"+
    "\0\u0220\0\u0220\0\u1d7c\0\u1dc0\0\u1e04\0\u0220\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u0220\0\u1f58\0\u0220\0\u0220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\6\1\5\1\7\1\10"+
    "\1\5\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\3\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\30\1\31\2\30\1\32\1\30\1\33\1\34\1\30"+
    "\1\35\1\36\1\30\1\37\1\40\1\41\1\42\1\30"+
    "\1\43\1\44\1\5\1\45\7\30\1\46\12\30\1\3"+
    "\2\47\1\50\2\47\1\51\1\47\1\52\47\47\1\53"+
    "\24\47\1\3\7\0\1\3\11\0\4\3\5\0\23\3"+
    "\3\0\23\3\106\0\1\4\101\0\1\30\7\0\1\54"+
    "\11\0\4\30\5\0\23\30\3\0\23\30\1\3\7\0"+
    "\1\3\11\0\4\22\5\0\23\3\3\0\23\3\21\0"+
    "\1\55\12\0\1\56\3\0\1\57\1\0\1\60\10\0"+
    "\1\61\6\0\1\56\3\0\1\57\11\0\1\61\3\0"+
    "\1\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\24\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\10\30\1\62\2\30\1\63\10\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\20\30\1\64\3\30\7\0"+
    "\1\30\11\0\4\30\5\0\1\65\22\30\3\0\1\65"+
    "\23\30\7\0\1\30\11\0\4\30\5\0\20\30\1\66"+
    "\2\30\3\0\12\30\1\67\4\30\1\66\4\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\4\30\1\70"+
    "\17\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\13\30\1\71\10\30\7\0\1\30\11\0\4\30\5\0"+
    "\23\30\3\0\1\72\23\30\7\0\1\30\11\0\4\30"+
    "\5\0\4\30\1\73\16\30\3\0\24\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\2\30\1\74\14\30"+
    "\1\75\4\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\4\30\1\76\2\30\1\77\14\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\1\100\23\30\7\0"+
    "\1\30\11\0\4\30\5\0\20\30\1\66\2\30\3\0"+
    "\17\30\1\66\3\30\2\47\1\0\2\47\1\0\1\47"+
    "\1\0\47\47\1\0\24\47\2\0\1\50\101\0\2\101"+
    "\4\0\1\101\1\102\1\101\1\103\45\101\1\104\2\101"+
    "\1\105\3\101\1\106\4\101\1\107\2\101\1\110\1\101"+
    "\1\111\2\101\1\0\14\112\1\0\4\112\1\113\16\112"+
    "\1\114\1\112\1\115\10\112\1\116\12\112\1\114\11\112"+
    "\1\116\3\112\51\0\1\117\24\0\1\117\54\0\1\120"+
    "\24\0\1\120\32\0\1\121\1\122\26\0\1\123\24\0"+
    "\1\123\36\0\1\124\2\0\1\125\3\0\1\126\6\0"+
    "\1\127\7\0\1\124\2\0\1\125\11\0\1\127\5\0"+
    "\1\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\1\130\23\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\11\30\1\131\12\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\12\30\1\132\11\30\7\0\1\30"+
    "\11\0\4\30\5\0\17\30\1\133\3\30\3\0\16\30"+
    "\1\133\5\30\7\0\1\30\11\0\4\30\5\0\4\30"+
    "\1\134\16\30\3\0\4\30\1\134\17\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\17\30\1\135\4\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\17\30"+
    "\1\136\4\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\11\30\1\137\12\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\15\30\1\140\6\30\7\0\1\30"+
    "\11\0\4\30\5\0\17\30\1\141\3\30\3\0\24\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\13\30"+
    "\1\142\10\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\15\30\1\143\6\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\21\30\1\144\2\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\14\30\1\145\7\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\15\30"+
    "\1\146\5\30\21\112\1\147\103\112\1\147\10\112\1\150"+
    "\72\112\1\147\25\112\1\151\24\112\1\151\30\112\1\147"+
    "\1\112\1\152\1\153\26\112\1\154\24\112\1\154\24\112"+
    "\1\147\11\112\1\155\2\112\1\156\3\112\1\157\6\112"+
    "\1\160\7\112\1\155\2\112\1\156\11\112\1\160\5\112"+
    "\51\0\1\161\24\0\1\161\52\0\1\162\24\0\1\162"+
    "\45\0\1\163\25\0\1\163\21\0\1\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\16\30\1\164\5\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\4\30"+
    "\1\165\17\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\2\30\1\166\21\30\7\0\1\30\11\0\4\30"+
    "\5\0\20\30\1\167\2\30\3\0\17\30\1\167\4\30"+
    "\7\0\1\30\11\0\4\30\5\0\16\30\1\170\4\30"+
    "\3\0\15\30\1\170\6\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\4\30\1\171\17\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\13\30\1\172\10\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\1\30"+
    "\1\173\22\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\1\174\23\30\7\0\1\30\11\0\4\30\5\0"+
    "\21\30\1\175\1\30\3\0\24\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\15\30\1\176\6\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\7\30\1\177"+
    "\14\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\17\30\1\200\4\30\7\0\1\30\11\0\4\30\5\0"+
    "\23\30\3\0\13\30\1\201\10\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\7\30\1\202\13\30\21\112"+
    "\1\147\10\112\1\203\72\112\1\147\27\112\1\204\24\112"+
    "\1\204\26\112\1\147\23\112\1\205\24\112\1\205\32\112"+
    "\1\147\12\112\1\206\25\112\1\206\21\112\44\0\1\207"+
    "\24\0\1\207\56\0\1\210\24\0\1\210\12\0\1\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\4\30"+
    "\1\211\17\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\12\30\1\212\11\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\7\30\1\213\14\30\7\0\1\30"+
    "\11\0\4\30\5\0\1\214\22\30\3\0\1\214\23\30"+
    "\7\0\1\30\11\0\4\30\5\0\1\215\22\30\3\0"+
    "\1\215\23\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\6\30\1\216\15\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\3\30\1\217\20\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\15\30\1\220\6\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\11\30"+
    "\1\221\12\30\7\0\1\30\11\0\4\30\5\0\11\30"+
    "\1\222\11\30\3\0\24\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\4\30\1\223\17\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\12\30\1\224\11\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\13\30"+
    "\1\225\10\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\1\226\22\30\21\112\1\147\22\112\1\227\24\112"+
    "\1\227\33\112\1\147\22\112\1\230\24\112\1\230\12\112"+
    "\37\0\1\231\25\0\1\231\16\0\1\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\16\30\1\232\5\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\17\30"+
    "\1\233\4\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\13\30\1\234\10\30\7\0\1\30\11\0\4\30"+
    "\5\0\3\30\1\235\17\30\3\0\3\30\1\235\20\30"+
    "\7\0\1\30\11\0\4\30\5\0\23\30\3\0\4\30"+
    "\1\236\17\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\13\30\1\237\10\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\4\30\1\240\17\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\4\30\1\241\17\30"+
    "\7\0\1\30\11\0\4\30\5\0\20\30\1\242\2\30"+
    "\3\0\24\30\7\0\1\30\11\0\4\30\5\0\23\30"+
    "\3\0\6\30\1\243\15\30\7\0\1\30\11\0\4\30"+
    "\5\0\23\30\3\0\1\30\1\244\21\30\21\112\1\147"+
    "\15\112\1\245\25\112\1\245\16\112\1\30\7\0\1\30"+
    "\11\0\4\30\5\0\23\30\3\0\1\246\23\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\12\30\1\247"+
    "\11\30\7\0\1\30\11\0\4\30\5\0\14\30\1\250"+
    "\6\30\3\0\13\30\1\250\10\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\15\30\1\251\6\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\16\30\1\252"+
    "\5\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\17\30\1\253\4\30\7\0\1\30\11\0\4\30\5\0"+
    "\23\30\3\0\10\30\1\254\13\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\15\30\1\255\6\30\7\0"+
    "\1\30\11\0\4\30\5\0\16\30\1\256\4\30\3\0"+
    "\15\30\1\256\6\30\7\0\1\30\11\0\4\30\5\0"+
    "\23\30\3\0\15\30\1\257\6\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\4\30\1\260\17\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\7\30\1\261"+
    "\14\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\13\30\1\262\10\30\7\0\1\30\11\0\4\30\5\0"+
    "\23\30\3\0\16\30\1\263\5\30\7\0\1\30\11\0"+
    "\4\30\5\0\23\30\3\0\13\30\1\264\10\30\7\0"+
    "\1\30\11\0\4\30\5\0\23\30\3\0\16\30\1\265"+
    "\5\30\7\0\1\30\11\0\4\30\5\0\23\30\3\0"+
    "\16\30\1\266\4\30";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\11\1\1\1\11\1\1\10\11\2\1"+
    "\2\11\1\1\2\11\14\1\2\11\2\1\1\11\1\1"+
    "\1\11\2\1\5\0\17\1\11\11\5\0\1\11\1\0"+
    "\2\11\2\0\3\11\17\1\1\0\1\1\1\0\2\1"+
    "\2\0\3\1\1\11\2\0\17\1\1\11\1\1\2\0"+
    "\1\11\1\0\17\1\1\0\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();    
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CopyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.TEXT, yytext());
            }
            // fall through
          case 67: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 68: break;
          case 3:
            { ClientError.getError().log("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
            }
            // fall through
          case 69: break;
          case 4:
            { yybegin(STRING); string.setLength(0);
            }
            // fall through
          case 70: break;
          case 5:
            { return symbol(sym.IDENTIFIER, yytext());
            }
            // fall through
          case 71: break;
          case 6:
            { return symbol(sym.LPAREN);
            }
            // fall through
          case 72: break;
          case 7:
            { return symbol(sym.RPAREN);
            }
            // fall through
          case 73: break;
          case 8:
            { return symbol(sym.MULT);
            }
            // fall through
          case 74: break;
          case 9:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 75: break;
          case 10:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 76: break;
          case 11:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 77: break;
          case 12:
            { return symbol(sym.DOT);
            }
            // fall through
          case 78: break;
          case 13:
            { return symbol(sym.DIV);
            }
            // fall through
          case 79: break;
          case 14:
            { return symbol(sym.INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 80: break;
          case 15:
            { return symbol(sym.COLON);
            }
            // fall through
          case 81: break;
          case 16:
            { return symbol(sym.SEMICOLON);
            }
            // fall through
          case 82: break;
          case 17:
            { return symbol(sym.EQ);
            }
            // fall through
          case 83: break;
          case 18:
            { return symbol(sym.GT);
            }
            // fall through
          case 84: break;
          case 19:
            { return symbol(sym.LBRACKET);
            }
            // fall through
          case 85: break;
          case 20:
            { return symbol(sym.RBRACKET);
            }
            // fall through
          case 86: break;
          case 21:
            { string.append( yytext() );
            }
            // fall through
          case 87: break;
          case 22:
            { ClientError.getError().log("Unterminated string at end of line");
            }
            // fall through
          case 88: break;
          case 23:
            { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
            }
            // fall through
          case 89: break;
          case 24:
            { return symbol(sym.DPESOS);
            }
            // fall through
          case 90: break;
          case 25:
            { ClientError.getError().log("Illegal escape sequence \""+yytext()+"\"");
            }
            // fall through
          case 91: break;
          case 26:
            { string.append( '\"' );
            }
            // fall through
          case 92: break;
          case 27:
            { string.append( '\'' );
            }
            // fall through
          case 93: break;
          case 28:
            { string.append( '\\' );
            }
            // fall through
          case 94: break;
          case 29:
            { string.append( '\b' );
            }
            // fall through
          case 95: break;
          case 30:
            { string.append( '\f' );
            }
            // fall through
          case 96: break;
          case 31:
            { string.append( '\n' );
            }
            // fall through
          case 97: break;
          case 32:
            { string.append( '\r' );
            }
            // fall through
          case 98: break;
          case 33:
            { string.append( '\t' );
            }
            // fall through
          case 99: break;
          case 34:
            { return symbol(sym.BR_OPEN);
            }
            // fall through
          case 100: break;
          case 35:
            { return symbol(sym.H1_OPEN);
            }
            // fall through
          case 101: break;
          case 36:
            { return symbol(sym.H2_OPEN);
            }
            // fall through
          case 102: break;
          case 37:
            { return symbol(sym.TD_OPEN);
            }
            // fall through
          case 103: break;
          case 38:
            { return symbol(sym.TH_OPEN);
            }
            // fall through
          case 104: break;
          case 39:
            { return symbol(sym.TR_OPEN);
            }
            // fall through
          case 105: break;
          case 40:
            { /* Ignorar */
            }
            // fall through
          case 106: break;
          case 41:
            { return symbol(sym.H1_CLOSE);
            }
            // fall through
          case 107: break;
          case 42:
            { return symbol(sym.H2_CLOSE);
            }
            // fall through
          case 108: break;
          case 43:
            { return symbol(sym.TD_CLOSE);
            }
            // fall through
          case 109: break;
          case 44:
            { return symbol(sym.TH_CLOSE);
            }
            // fall through
          case 110: break;
          case 45:
            { return symbol(sym.TR_CLOSE);
            }
            // fall through
          case 111: break;
          case 46:
            { return symbol(sym.FOR_OPEN);
            }
            // fall through
          case 112: break;
          case 47:
            { return symbol(sym.TIPO);
            }
            // fall through
          case 113: break;
          case 48:
            { return symbol(sym.FOR_CLOSE);
            }
            // fall through
          case 114: break;
          case 49:
            { return symbol(sym.HTML_OPEN);
            }
            // fall through
          case 115: break;
          case 50:
            { return symbol(sym.HASTA);
            }
            // fall through
          case 116: break;
          case 51:
            { return symbol(sym.SCORE);
            }
            // fall through
          case 117: break;
          case 52:
            { return symbol(sym.TEXTO_COMENTARIO);
            }
            // fall through
          case 118: break;
          case 53:
            { return symbol(sym.HTML_CLOSE);
            }
            // fall through
          case 119: break;
          case 54:
            { return symbol(sym.TABLE_OPEN);
            }
            // fall through
          case 120: break;
          case 55:
            { return symbol(sym.CLASES);
            }
            // fall through
          case 121: break;
          case 56:
            { return symbol(sym.NOMBRE);
            }
            // fall through
          case 122: break;
          case 57:
            { return symbol(sym.RESULT);
            }
            // fall through
          case 123: break;
          case 58:
            { return symbol(sym.STRING);
            }
            // fall through
          case 124: break;
          case 59:
            { return symbol(sym.TABLE_CLOSE);
            }
            // fall through
          case 125: break;
          case 60:
            { return symbol(sym.FUNCION);
            }
            // fall through
          case 126: break;
          case 61:
            { return symbol(sym.INTEGER);
            }
            // fall through
          case 127: break;
          case 62:
            { return symbol(sym.METODOS);
            }
            // fall through
          case 128: break;
          case 63:
            { return symbol(sym.ITERADOR);
            }
            // fall through
          case 129: break;
          case 64:
            { return symbol(sym.VARIABLES);
            }
            // fall through
          case 130: break;
          case 65:
            { return symbol(sym.PARAMETROS);
            }
            // fall through
          case 131: break;
          case 66:
            { return symbol(sym.COMENTARIOS);
            }
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
